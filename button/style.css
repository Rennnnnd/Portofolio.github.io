@import url('https://unpkg.com/normalize.css') layer(normalize);

@layer normalize, base, demo;

@layer demo {
  :root {
    --border: 2;
  }
  .border-button {
    --bg: color-mix(in hsl, canvas, canvasText 10%);
    --color: color-mix(in hsl, canvasText, canvas 20%);
    color: var(--color);
    position: relative;
    padding: 0.5rem 1rem;
    border: calc(var(--border) * 1px) solid transparent;
    background: linear-gradient(var(--bg), var(--bg)) padding-box;
    font-family: sans-serif;
    border-radius: 12px;
    cursor: pointer;
    font-weight: 500;
    font-size: 0.875rem;
    display: flex;
    align-items: center;
    gap: 0.5rem;
    outline-offset: 0.25rem;
    outline-color: hsl(210 100% 60%);
    svg {
      width: 24px;
    }

    span {
      white-space: nowrap;
    }
  }
  .border-button::after,
  .border-button::before {
    content: '';
    border-radius: 12px;
    position: absolute;
    inset: calc(var(--border) * -1px);
    z-index: -1;
  }

  .border-button::before {
    background: color-mix(in hsl, var(--color), canvas 75%);
  }

  @property --complete {
    initial-value: 0;
    syntax: '<number>';
    inherits: true;
  }

  [data-style='single'] {
    .border-button::after {
      mask: conic-gradient(
        from calc(var(--from, 0) * 1deg),
        #000 calc(var(--complete) * 1%),
        #0000 calc(var(--complete) * 1%)
      );
    }
  }

  [data-style='double'] {
    .border-button::after {
      mask: conic-gradient(
        from calc(var(--from, 0) * 1deg),
        #000 calc(var(--complete) * 1%),
        #0000 calc(var(--complete) * 1%),
        #0000 calc((100 - var(--complete)) * 1%),
        #000 calc((100 - var(--complete)) * 1%)
      );
    }
  }

  .border-button::after {
    background: linear-gradient(
      65deg,
      hsl(280 90% 60%),
      hsl(35 100% 55%),
      hsl(10 100% 55%)
    );
    mask-size: 200px 200px;
    mask-position: 50% 50%;
    transition: --complete 0.6s;
    transition-timing-function: linear(
      0 0%,
      0.0027 3.64%,
      0.0106 7.29%,
      0.0425 14.58%,
      0.0957 21.87%,
      0.1701 29.16%,
      0.2477 35.19%,
      0.3401 41.23%,
      0.5982 55.18%,
      0.7044 61.56%,
      0.7987 68.28%,
      0.875 75%,
      0.9297 81.25%,
      0.9687 87.5%,
      0.9922 93.75%,
      1 100%
    );
  }

  .border-button:is(:hover, :focus-visible) {
    --complete: 100;
  }
}

@layer base {
  :root {
    --font-size-min: 16;
    --font-size-max: 20;
    --font-ratio-min: 1.2;
    --font-ratio-max: 1.33;
    --font-width-min: 375;
    --font-width-max: 1500;
  }

  html {
    color-scheme: light dark;
  }

  [data-theme='light'] {
    color-scheme: light only;
  }

  [data-theme='dark'] {
    color-scheme: dark only;
  }

  :where(.fluid) {
    --fluid-min: calc(
      var(--font-size-min) * pow(var(--font-ratio-min), var(--font-level, 0))
    );
    --fluid-max: calc(
      var(--font-size-max) * pow(var(--font-ratio-max), var(--font-level, 0))
    );
    --fluid-preferred: calc(
      (var(--fluid-max) - var(--fluid-min)) /
        (var(--font-width-max) - var(--font-width-min))
    );
    --fluid-type: clamp(
      (var(--fluid-min) / 16) * 1rem,
      ((var(--fluid-min) / 16) * 1rem) -
        (((var(--fluid-preferred) * var(--font-width-min)) / 16) * 1rem) +
        (var(--fluid-preferred) * var(--variable-unit, 100vi)),
      (var(--fluid-max) / 16) * 1rem
    );
    font-size: var(--fluid-type);
  }

  *,
  *:after,
  *:before {
    box-sizing: border-box;
  }

  body {
    display: grid;
    place-items: center;
    min-height: 100vh;
    font-family: 'SF Pro Text', 'SF Pro Icons', 'AOS Icons', 'Helvetica Neue',
      Helvetica, Arial, sans-serif, system-ui;
  }

  body::before {
    --size: 45px;
    --line: color-mix(in lch, canvasText, transparent 70%);
    content: '';
    height: 100vh;
    width: 100vw;
    position: fixed;
    background: linear-gradient(
          90deg,
          var(--line) 1px,
          transparent 1px var(--size)
        )
        50% 50% / var(--size) var(--size),
      linear-gradient(var(--line) 1px, transparent 1px var(--size)) 50% 50% /
        var(--size) var(--size);
    mask: linear-gradient(-20deg, transparent 50%, white);
    top: 0;
    transform-style: flat;
    pointer-events: none;
    z-index: -1;
  }

  .bear-link {
    color: canvasText;
    position: fixed;
    top: 1rem;
    left: 1rem;
    width: 48px;
    aspect-ratio: 1;
    display: grid;
    place-items: center;
    opacity: 0.8;
  }

  :where(.x-link, .bear-link):is(:hover, :focus-visible) {
    opacity: 1;
  }

  .bear-link svg {
    width: 75%;
  }

  /* Utilities */
  .sr-only {
    position: absolute;
    width: 1px;
    height: 1px;
    padding: 0;
    margin: -1px;
    overflow: hidden;
    clip: rect(0, 0, 0, 0);
    white-space: nowrap;
    border-width: 0;
  }
}
